{"name":"Bux","body":"# bux\r\n\r\nA money and currency manipulation library for Clojure\r\n\r\n[![Build Status](https://secure.travis-ci.org/pelle/bux.png)](http://travis-ci.org/pelle/bux)\r\n\r\n## Usage\r\n\r\nAdd the following to your project.clj\r\n\r\n    [bux \"0.2.1\"]\r\n\r\n### Currencies\r\n\r\n    (use 'bux.currency)\r\n\r\nCreate a custom currency using create-currency:\r\n\r\n    (create-currency {:symbol \"★\", :name \"Super points\", :iso-code \"super-points\"})\r\n    => #bux.currency.Currency{:iso-code \"super-points\", :name \"Super points\", :symbol \"★\", :subunit nil, :symbol-first nil, :html-entity nil, :iso-numeric nil, :decimal-points nil, :priority nil}\r\n\r\n\r\nLoad up predefined currencies:\r\n\r\n    (use 'bux.currencies)\r\n\r\nThis adds all current national currencies to the bux.currencies namespace using the ISO code as the symbol.\r\n\r\n    USD\r\n    => #bux.currency.Currency{:iso-code \"USD\", :name \"United States Dollar\", :symbol \"$\", :subunit \"Cent\",  :symbol-first true, :html-entity \"$\", :iso-numeric \"840\", :priority 1}\r\n\r\nBased on current locale it places the default currency in $\r\n\r\n    $\r\n    => #bux.currency.Currency{:iso-code \"USD\", :name \"United States Dollar\", :symbol \"$\", :subunit \"Cent\",  :symbol-first true, :html-entity \"$\", :iso-numeric \"840\", :priority 1}\r\n\r\nThe var bux.currencies/$ is dynamically bindable so you could bind a different value to it for different users in a ring request.\r\n\r\nNote currency list lifted from [Ruby Money](http://rubymoney.github.com/money/)\r\n\r\n### Money\r\n\r\nMoney is basically BigDecimals set at the scale required for the currency.\r\n\r\nTo create a proper BigDecimal from either string or number use the currency as a function:\r\n\r\n    (USD 1.23)\r\n    => 1.23M\r\n\r\n    (USD 1.234M)\r\n    => 1.23M\r\n\r\n    (USD \"$1.23\")\r\n    => 1.23M\r\n\r\nOr using the default currency:\r\n\r\n    ($ 1.23)\r\n    => 1.23M\r\n\r\n    ($ 1.234M)\r\n    => 1.23M\r\n\r\n    ($ \"$1.23\")\r\n    => 1.23M\r\n\r\nTo format it without a symbol just use clojure's built in str function\r\n\r\n    (str (USD 1.23))\r\n    => \"1.00\"\r\n\r\nTo format it with a symbol use the str$ function:\r\n\r\n    (str$ USD 1.23M)\r\n    => \"$1.23\"\r\n\r\nParse strings directly:\r\n\r\n    (parse$ USD \"$1,123.00\")\r\n    => 1123.00M\r\n\r\n### Calculations\r\n\r\n    (use 'bux.calc)\r\n\r\nThese can use the precision of a currency and take an optional currency parameter for calculating with correct precission.\r\n\r\nPercentage:\r\n\r\n    (pct 1.23M 10)\r\n    => 0.12M\r\n\r\n    (pct USD 1.231M 10)\r\n    => 0.12M\r\n\r\n\r\nWith Percentage (can be used for including sales tax, commissions etc.):\r\n\r\n    (pct+ 1.23M 10)\r\n    => 1.35M\r\n\r\n    (pct+ USD 1.23M 10)\r\n    => 1.35M\r\n\r\nPercentage discount:\r\n\r\n    (pct- 1.23M 10)\r\n    => 1.11<\r\n\r\n    (pct- USD 1.23M 10)\r\n    => 1.11M\r\n\r\n## License\r\n\r\nCopyright (C) 2012 Pelle Braendgaard http://stakeventures.com\r\n\r\nDistributed under the Eclipse Public License, the same as Clojure.\r\n","tagline":"Money and Currency manipulation in Clojure","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}